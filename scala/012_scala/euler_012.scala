/* 
 * The sequence of triangle numbers is generated by adding the natural 
 * numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. 
 * The first ten terms would be:
 * 
 * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 * 
 * Let us list the factors of the first seven triangle numbers:
 * 
 *  1: 1
 *  3: 1,3
 *  6: 1,2,3,6
 * 10: 1,2,5,10
 * 15: 1,3,5,15
 * 21: 1,3,7,21
 * 28: 1,2,4,7,14,28
 * We can see that 28 is the first triangle number to have over five divisors.
 * 
 * What is the value of the first triangle number to have over five hundred divisors?
 */ 

import scala.collection.mutable.Map

def getPrimeFactors(x:Long) : Map[Int, Int] = {
  val primeFactors = Map[Int, Int]()
  var div = 2
  var remainder = x

  while (div <= remainder) { 
    if (remainder % div == 0) {
      remainder = remainder / div
      if (primeFactors.contains(div)) primeFactors += (div -> (primeFactors(div)+1))
        else primeFactors += (div -> 1)
    }
    else div += 1
  }

  primeFactors
}

def numOfFactors(x:Long) : Int = {
  var factors = 1 
  getPrimeFactors(x).values.foreach((pf:Int) => { factors *= (pf+1) } )
  factors
}

var triangle = 0L
var noOfFactors = 0
var factor = 0L
var n = 0L
val maxFactors = 500 

while (noOfFactors <= maxFactors) {
  // calculate next triangle number
  n += 1
  triangle += n 
  
  // get number of factors for triangle number
  noOfFactors = numOfFactors(triangle)
}

println(triangle)
